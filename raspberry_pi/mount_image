#!/bin/bash
set -e

PATH=/home/rgabriana/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin

# Root check 

if [ $UID != 0 ]; then 

  echo -e "YOU NEED ADMIN PRIVELEGES TO RUN THIS SCRIPT\n"
  exit

else 

  echo -e "The purpose of this script is to extract the raspberry pi image and mount the image so that you can modify it\n"

fi

# enable programmable completion features

if ! shopt -oq posix; then
  if [ -f /usr/share/bash-completion/bash_completion ]; then
    . /usr/share/bash-completion/bash_completion
  elif [ -f /etc/bash_completion ]; then
    . /etc/bash_completion
  fi
fi

read -p "Please enter the file location of the raspberry pi image? " rimage


# Image check 

if [ ! -e $rimage ]; then

  echo -e "$rimage file is not a regular file\n"
  exit

fi

if [ ! -r $rimage ]; then 

  echo -e "You don't have permission to read $rimage . \n"
  exit

fi

# dir check 

echo -e "Raspberry pi's comes with 2 partitions.\nA root partition and a boot partition.\n"
read -p "Please enter the folder you want to mount the root partition? " rmount

# root

if [ ! -d $rmount ]; then 

  mkdir -pv $rmount

fi

read -p "Please enter the folder you want to mount the boot partition? " bmount

# boot

if [ ! -d $bmount ]; then

  mkdir -pv $bmount

fi

echo -e "One moment please while I mount those partitions\n"

# partition calculation

rdisksize=`fdisk -l $rimage|grep -e '.img2'|grep -v grep|awk -F " " '{print $2}'`
roffset=`echo $[rdisksize*512]`
bdisksize=`fdisk -l $rimage|grep -e '.img1'|grep -v grep|awk -F " " '{print $2}'`
boffset=`echo $[bdisksize*512]`

# mount the first partition

mount -v -t vfat -o loop,offset=$boffset $rimage $bmount

# mount the second partition

mount -v -t ext4 -o loop,offset=$roffset $rimage $rmount

echo -e "Your raspberry pi boot image has been mounted to $bmount and your root image has been mounted to $rmount\n"
read -p "Do you want to load your modified configs into this raspberry pi image? " mod

  case $mod in

    [Yy][Ee][Ss] )

      read -p "enter the full path of the modified configs" config_folder
      configs=$(find $config_folder -type f | sed -s 's|./||')

      for src in $configs; do

        echo -e "creating backup of $src"
        cp -vf $src $src.bk
        echo -e "implementing modified configs"
        target="$rmount/$src"
        cp -vf "$src" "$target"

      done

      mount_ () {
      read -p "Load complete do you want to unmount? " _mount
      case $_mount in 

        [Yy][Ee][Ss] )
          umount -v $rmount
          umount -v $bmount
          exit
        ;;

        [Nn][Oo] )
          echo -e "As you wish"
          exit
        ;;

        * )
          echo -e "Please answer yes or no"
          mount_
        ;;

      esac }

      mount_
    ;;

    [Nn][Oo] )

      echo -e "As you wish.  Goodday\n"
      exit
    ;;

    * )

      echo -e "I really do not have time to pander your indecissiveness.  Goodbye\n"
      exit
    ;;

  esac
