#!/bin/bash
set -e

PATH=/home/rgabriana/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
light_red_font="\e[91m"
green_font="\e[32m"
light_yellow_font="\e[93m"
reset="\e[0m"
#blink="\e[5m"
# Root check 

if [ $UID != 0 ]; then 

  echo -e "$light_red_font YOU NEED ADMIN PRIVELEGES TO RUN THIS SCRIPT $reset\n"
  exit

else
 
  echo -e "$light_yellow_font The purpose of this script is to extract the raspberry pi image and mount the image so that you can modify it. $reset \n"

fi

read -p "Please enter the file location of the raspberry pi image? " rimage


# Image check 

if [ ! -e $rimage ]; then

  echo -e "$light_red_font $rimage file is not a regular file $reset \n"
  exit

fi

if [ ! -r $rimage ]; then 

  echo -e "$light_red_font You don't have permission to read $rimage. $reset \n"
  exit

fi

# dir check 

echo -e "$light_yellow_font Raspberry pi's comes with 2 partitions.\nA root partition and a boot partition. $reset \n"
read -p "Please enter the folder you want to mount the root partition? " rmount

# root

if [ ! -d $rmount ]; then 

  mkdir -pv $rmount

fi

read -p "Please enter the folder you want to mount the boot partition? " bmount

# boot

if [ ! -d $bmount ]; then

  mkdir -pv $bmount

fi

echo -e "$green_font One moment please while I mount those partitions $reset \n"

# partition calculation

rdisksize=`fdisk -l $rimage|grep -e '.img2'|grep -v grep|awk -F " " '{print $2}'`
roffset=`echo $[rdisksize*512]`
bdisksize=`fdisk -l $rimage|grep -e '.img1'|grep -v grep|awk -F " " '{print $2}'`
boffset=`echo $[bdisksize*512]`

# mount the first partition

mount -v -t vfat -o loop,offset=$boffset $rimage $bmount

# mount the second partition

mount -v -t ext4 -o loop,offset=$roffset $rimage $rmount

echo -e "$light_yellow_font Your raspberry pi boot image has been mounted to \
$light_red_font $bmount $light_yellow_font and your root image has been mounted to \
$light_red_font $rmount $light_yellow_font.  This script can also apply your modified configs \
onto the image, for this to work properly, the directory structure of the \"source\" folders \
and files must match the targets folders and files.\n\n $light_red_font Example: \
\"/source/direcotry/path/file\" -> \"$rmount/directory/path/file\". $reset \n"

read -p "Do you want to load your modified configs into this raspberry pi image? " mod

  case $mod in

    [Yy][Ee][Ss] )

      read -p "enter the full path of the modified configs: " config_folder
      configs=$(find $config_folder -type f)

      for src in $configs; do
        target_folder=$rmount/`dirname $src | sed -s "s|$config_folder||"`
        target_file=`basename $src`
        file_check () {
          md5sum $1 | awk -F " " '{print $1}'
	}
        echo -e "$light_yellow_font folder check $target_folder $reset"
          if [ ! -d $target_folder ]; then 
            echo -e "$light_yellow_font creating target folders $target_folder $reset" 
            mkdir -pv $target_folder
          fi
        echo -e "$light_yellow_font file check $target_file $reset"
          if [ -f $target_folder/$target_file ]; then
            echo -e "$light_yellow_font file $target_file exists checking signature $reset"
            if [ "$(file_check $target_folder/$target_file)" !=  "$(file_check $src)" ]; then
              echo -e "$light_red_font source $src and target $target_file signatures don't match.  Creating backups of $target_file $reset"
              cp -puv $target_folder/$target_file $target_folder/$target_file.bk
            else
              echo -e "$green_font $target_folder/$target_file and $src are the same no actions needed $reset"
            fi
          else
              echo -e "$light_red_font $target_file file doesn't exist not creating backups $reset"

          fi
 
          echo -e "$light_yellow_font implementing modified configs $target_file $reset"
          cp -puv $src $target_folder/$target_file
          if [ -f $target_folder/$target_file.bk ]; then
            chown -vf --reference=$target_folder/$target_file.bk $target_folder/$target_file
            chmod -vf --reference=$target_folder/$target_file.bk $target_folder/$target_file
          else
            echo -e "$light_red_font reference file doesn't exist, moving on $reset"
          fi

      done

      mount_ () {
      read -p "Load complete do you want to unmount? " umount
      case $umount in 

        [Yy][Ee][Ss] )
          umount -v $rmount
          umount -v $bmount
          exit
        ;;

        [Nn][Oo] )
          echo -e "$green_font As you wish $reset"
          exit
        ;;

        * )
          echo -e "$green_font Please answer $light_red_font yes $reset or $light_red_font no $reset"
          mount_
        ;;

      esac }

      mount_
    ;;

    [Nn][Oo] )

      echo -e "$green_font As you wish.  Goodday $reset \n"
      exit
    ;;

    * )

      echo -e "$light_red_font I really do not have time to pander your indecissiveness.  Goodbye $reset \n"
      exit
    ;;

  esac
